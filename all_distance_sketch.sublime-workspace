{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"num",
				"num_threads"
			],
			[
				"gra",
				"graph_sketch_"
			],
			[
				"GetN",
				"GetNodesDistribution"
			],
			[
				"call",
				"call_back"
			],
			[
				"ca",
				"call_back"
			],
			[
				"graph",
				"graph_sketch"
			],
			[
				"algo",
				"algo_statistics_"
			],
			[
				"stop",
				"stop_after"
			],
			[
				"ske",
				"sketch_lock"
			],
			[
				"is",
				"is_multi_threaded"
			],
			[
				"distan",
				"distance_from_source_to_visited_node"
			],
			[
				"vise",
				"visited_node_id"
			],
			[
				"alg",
				"algo_statistics_"
			],
			[
				"al",
				"algo_statistics"
			],
			[
				"Di",
				"DijkstraCallBacks"
			],
			[
				"should_ca",
				"should_calculate_dijkstra_rank_"
			],
			[
				"sket",
				"sketch_lock_"
			],
			[
				"is_mul",
				"is_multi_threaded"
			],
			[
				"sh",
				"sholdStop"
			],
			[
				"shoul",
				"should_prune"
			],
			[
				"con",
				"continue"
			],
			[
				"visited",
				"visited_node_id"
			],
			[
				"so",
				"source_node_id_"
			],
			[
				"Gra",
				"GraphSketch"
			],
			[
				"source",
				"source_node_id"
			],
			[
				"sour",
				"source_node_id"
			],
			[
				"ran",
				"rank"
			],
			[
				"should",
				"should_calculate_dijkstra_rank"
			],
			[
				"set_",
				"set_multi_threaded"
			],
			[
				"is_",
				"is_lean_"
			],
			[
				"reserve",
				"reserve_size_"
			],
			[
				"siz",
				"size"
			],
			[
				"dista",
				"distance"
			],
			[
				"rand",
				"random_id"
			],
			[
				"uni",
				"uniform_rank_calculator"
			],
			[
				"end",
				"end_range"
			],
			[
				"node",
				"node_degree"
			],
			[
				"movie",
				"movie_id"
			],
			[
				"de",
				"dest"
			],
			[
				"user",
				"user_id"
			],
			[
				"iter",
				"Iterator"
			],
			[
				"use",
				"user_id"
			],
			[
				"sstab",
				"sstable_location"
			],
			[
				"mo",
				"movielen"
			],
			[
				"nodes",
				"nodes_in_sketch"
			],
			[
				"aN",
				"aNode"
			],
			[
				"sorted",
				"sorted_v"
			],
			[
				"inser",
				"insert_prob"
			],
			[
				"myNode",
				"myNodesADS"
			],
			[
				"m_node",
				"m_node_insert_prob"
			],
			[
				"z",
				"isZvalue"
			],
			[
				"it_k",
				"it_k_plus_1"
			],
			[
				"Get",
				"GetDistance"
			],
			[
				"TNodes",
				"TNodesADSVectorLean"
			],
			[
				"myNodes",
				"myNodesVector"
			],
			[
				"beg",
				"begin"
			],
			[
				"node_",
				"node_id"
			],
			[
				"p_",
				"p_values"
			],
			[
				"Load",
				"LoadGraphFromDir"
			],
			[
				"m_gra",
				"m_graph_information"
			],
			[
				"m_node_",
				"m_node_distance"
			],
			[
				"myNodesADS",
				"myNodesADSId"
			],
			[
				"ssta",
				"sstable"
			],
			[
				"names",
				"namespace"
			],
			[
				"name",
				"namespace"
			],
			[
				"TEST",
				"TEST_F"
			],
			[
				"gr",
				"graph"
			],
			[
				"graph_info",
				"graph_information_2"
			],
			[
				"grap",
				"graph_information_2"
			],
			[
				"EPX",
				"EXPECT_EQ"
			],
			[
				"m_",
				"m_graph_ads"
			],
			[
				"base",
				"base_directory"
			],
			[
				"myN",
				"myNodesADS"
			],
			[
				"GetNodes",
				"GetNodesDistribution"
			],
			[
				"GetNodesD",
				"GetNodesDistributionLean"
			],
			[
				"graph_",
				"graph_information"
			],
			[
				"ads",
				"ads_based_similarity"
			],
			[
				"Save",
				"SaveThresholdAndRandomId"
			],
			[
				"all_",
				"all_distance_sketch"
			],
			[
				"rese",
				"reserveSize"
			],
			[
				"my",
				"myK"
			],
			[
				"myNodesAD",
				"myNodesADS"
			],
			[
				"all_d",
				"all_distance_sketch_wrapper"
			],
			[
				"In",
				"InfoVec"
			],
			[
				"laser",
				"laser_input_proto"
			],
			[
				"lase",
				"laser_input"
			],
			[
				"lis",
				"lightshow"
			],
			[
				"lear",
				"learning_laser"
			],
			[
				"no",
				"nodeIt"
			],
			[
				"GetM",
				"GetMxNId"
			],
			[
				"dst",
				"dstNId"
			],
			[
				"aS",
				"aSrcNId"
			],
			[
				"Is",
				"IsNode"
			],
			[
				"GetMa",
				"GetMaxSrc"
			],
			[
				"Gene",
				"GenericGraphBaseAdaptor"
			],
			[
				"edge",
				"edges_list"
			],
			[
				"DE",
				"DEBUG5"
			],
			[
				"max",
				"maxSrc"
			],
			[
				"aSr",
				"aSrcNId"
			],
			[
				"src",
				"srcNId"
			],
			[
				"Conver",
				"ConvertExtToInt"
			],
			[
				"aDs",
				"aDstNId"
			],
			[
				"ex",
				"externalToInternal"
			],
			[
				"aSrc",
				"aSrcNId"
			],
			[
				"aD",
				"aDstNId"
			],
			[
				"N",
				"NId"
			],
			[
				"aEx",
				"aExternalId"
			],
			[
				"inc",
				"include"
			],
			[
				"Node",
				"NodeList"
			],
			[
				"_Add",
				"_AddEdge"
			],
			[
				"des",
				"destNId"
			],
			[
				"dist",
				"distance"
			],
			[
				"typ",
				"typename"
			],
			[
				"sna",
				"snap-core"
			],
			[
				"type",
				"typedef"
			],
			[
				"s",
				"size"
			],
			[
				"index",
				"indexLast"
			],
			[
				"DEBUG",
				"DEBUG2"
			],
			[
				"rightChild",
				"rightChildDepth"
			],
			[
				"rightC",
				"rightChild"
			],
			[
				"rightChil",
				"rightChildDepth"
			],
			[
				"leftC",
				"leftChildDepth"
			],
			[
				"Cal",
				"CalculateDepth"
			],
			[
				"GetLe",
				"GetLeftChild"
			],
			[
				"right",
				"rightChild"
			],
			[
				"GetLeft",
				"GetLeftChildDepth"
			],
			[
				"GetRi",
				"GetRightChildDepth"
			],
			[
				"dep",
				"depth"
			]
		]
	},
	"buffers":
	[
		{
			"file": "all_distance_sketch/algorithms/dijkstra_shortest_paths.h",
			"settings":
			{
				"buffer_size": 9261,
				"line_ending": "Unix"
			}
		},
		{
			"file": "all_distance_sketch/algorithms/sketch_calculation.h",
			"settings":
			{
				"buffer_size": 8762,
				"line_ending": "Unix"
			}
		},
		{
			"file": "all_distance_sketch/graph/lemon_graph_adaptor.h",
			"settings":
			{
				"buffer_size": 9809,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/google/src/cloud/eliav/change_structure/google3/experimental/ads_based_similarity/ads_based_similarity/graph_information/ads_information.h",
			"settings":
			{
				"buffer_size": 5164,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/google/src/cloud/eliav/add_ads_lib/google3/third_party/all_distance_sketch/all_distance_sketch/algorithms/ut/algo_test.cpp",
			"settings":
			{
				"buffer_size": 36965,
				"line_ending": "Unix"
			}
		},
		{
			"file": "all_distance_sketch/graph/snap_graph_adaptor.h",
			"settings":
			{
				"buffer_size": 651,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/google/src/cloud/eliav/add_ads_lib/google3/third_party/all_distance_sketch/BUILD",
			"settings":
			{
				"buffer_size": 2394,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/google/src/cloud/eliav/add_ads_lib/google3/third_party/all_distance_sketch/all_distance_sketch/graph/ut/basic_graph.cpp",
			"settings":
			{
				"buffer_size": 8453,
				"line_ending": "Unix"
			}
		},
		{
			"file": "all_distance_sketch/graph/graph.h",
			"settings":
			{
				"buffer_size": 7065,
				"line_ending": "Unix"
			}
		},
		{
			"file": "BUILD",
			"settings":
			{
				"buffer_size": 2712,
				"line_ending": "Unix"
			}
		},
		{
			"file": "all_distance_sketch/sketch/node_sketch.h",
			"settings":
			{
				"buffer_size": 22183,
				"line_ending": "Unix"
			}
		},
		{
			"file": "all_distance_sketch/graph/ut/basic_graph.cpp",
			"settings":
			{
				"buffer_size": 8454,
				"line_ending": "Unix"
			}
		},
		{
			"file": "all_distance_sketch/proto/all_distance_sketch.proto",
			"settings":
			{
				"buffer_size": 2507,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 117.0,
		"last_filter": "set syntax: pro",
		"selected_items":
		[
			[
				"set syntax: pro",
				"Set Syntax: Cap'n Proto"
			],
			[
				"proto",
				"Set Syntax: Cap'n Proto"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"sublime",
				"SublimeLinter: Choose Mark Style"
			],
			[
				"pac",
				"Package Control: Install Package"
			],
			[
				"python",
				"Set Syntax: Python"
			],
			[
				"pytho",
				"Set Syntax: Python"
			],
			[
				"pyth",
				"Set Syntax: Python"
			],
			[
				"py",
				"Set Syntax: Python"
			],
			[
				"pyh",
				"Set Syntax: Python"
			],
			[
				"set syn py",
				"Set Syntax: Python"
			],
			[
				"pyt",
				"Set Syntax: Python"
			],
			[
				"enable",
				"Package Control: Enable Package"
			],
			[
				"package cont",
				"Package Control: Install Package"
			],
			[
				"set syntax: p",
				"Set Syntax: Python"
			],
			[
				"Prefor",
				"Perforce: Diff"
			],
			[
				"Pre",
				"Perforce: Checkout"
			],
			[
				"package control: is",
				"Package Control: Install Package"
			]
		],
		"width": 467.0
	},
	"console":
	{
		"height": 248.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = '7183a2d3e96f11eeadd761d777e62404' + 'e330c659d4bb41d3bdf022e94cab3cd0'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/google/src/cloud/eliav/t_skim_algo/google3/third_party/all_distance_sketch"
	],
	"file_history":
	[
		"/google/src/cloud/eliav/change_structure/google3/third_party/all_distance_sketch/all_distance_sketch/algorithms/ut/algo_test.cpp",
		"/google/src/cloud/eliav/change_structure/google3/experimental/ads_based_similarity/BUILD",
		"/google/src/cloud/eliav/change_structure/google3/third_party/all_distance_sketch/all_distance_sketch/algorithms/dijkstra_shortest_paths.h~",
		"/google/src/cloud/eliav/change_structure/google3/third_party/all_distance_sketch/all_distance_sketch.sublime-project",
		"/google/src/cloud/eliav/change_structure/google3/third_party/all_distance_sketch/all_distance_sketch/algorithms/t_skim.h",
		"/google/src/cloud/eliav/change_structure/google3/third_party/all_distance_sketch/all_distance_sketch/sketch/node_sketch.h",
		"/google/src/cloud/eliav/change_structure/google3/third_party/all_distance_sketch/all_distance_sketch/algorithms/sketch_calculation.h",
		"/google/src/cloud/eliav/change_structure/google3/third_party/all_distance_sketch/all_distance_sketch/common.h",
		"/google/src/cloud/eliav/change_structure/google3/third_party/all_distance_sketch/all_distance_sketch/algorithms/reverse_rank.h",
		"/google/src/cloud/eliav/change_structure/google3/third_party/all_distance_sketch/all_distance_sketch/algorithms/sketch_calculation.",
		"/google/src/cloud/eliav/change_structure/google3/third_party/all_distance_sketch/all_distance_sketch/sketch/rank_calculator.h",
		"/google/src/cloud/eliav/change_structure/google3/third_party/all_distance_sketch/BUILD",
		"/google/src/cloud/eliav/change_structure/google3/third_party/all_distance_sketch/all_distance_sketch/sketch/graph_sketch.h",
		"/google/src/cloud/eliav/change_structure/google3/third_party/all_distance_sketch/all_distance_sketch/graph/lemon_graph_adaptor.h",
		"/google/src/cloud/eliav/change_structure/google3/third_party/all_distance_sketch/all_distance_sketch/graph/graph.h",
		"/google/src/cloud/eliav/change_structure/google3/third_party/all_distance_sketch/all_distance_sketch/graph/generic_graph_adaptor.h",
		"/google/src/cloud/eliav/change_structure/google3/third_party/all_distance_sketch/all_distance_sketch/algorithms/sketch_calculation.cpp",
		"/google/src/cloud/eliav/change_structure/google3/third_party/all_distance_sketch/all_distance_sketch/algorithms/algo.h",
		"/google/src/cloud/eliav/change_structure/google3/third_party/all_distance_sketch/all_distance_sketch/algorithms/algo.cpp",
		"/google/src/cloud/eliav/change_structure/google3/third_party/all_distance_sketch/all_distance_sketch/sketch/node_sketch.",
		"//depot/google3/third_party/all_distance_sketch/all_distance_sketch/graph/lemon_graph_adaptor.h",
		"/google/src/cloud/eliav/change_structure/google3/third_party/all_distance_sketch/all_distance_sketch/sketch/node_sketch.cpp",
		"//depot/google3/third_party/all_distance_sketch/all_distance_sketch/sketch/node_sketch.cpp",
		"/google/src/cloud/eliav/change_structure/google3/third_party/all_distance_sketch/all_distance_sketch/utils/thread_utils.h",
		"/google/src/cloud/eliav/change_structure/google3/third_party/all_distance_sketch/all_distance_sketch/utils/utils.h",
		"/google/src/cloud/eliav/lint_lib/google3/third_party/all_distance_sketch/all_distance_sketch/graph/ut/basic_graph.cpp",
		"/google/src/cloud/eliav/change_structure/google3/third_party/all_distance_sketch/all_distance_sketch/graph/rank_calculator.h",
		"/google/src/cloud/eliav/change_structure/google3/third_party/all_distance_sketch/all_distance_sketch/graph/thread_utils.h",
		"/google/src/cloud/eliav/change_structure/google3/third_party/all_distance_sketch/all_distance_sketch/graph/ut/run_all.cpp",
		"/google/src/cloud/eliav/change_structure/google3/BUILD",
		"/google/src/cloud/eliav/check_third_party_compile/google3/third_party/all_distance_sketch/BUILD",
		"/google/src/cloud/eliav/lint_lib/google3/third_party/all_distance_sketch/README.google",
		"/google/src/cloud/eliav/lint_lib/google3/third_party/all_distance_sketch/all_distance_sketch/graph/thread_utils.h",
		"/google/src/cloud/eliav/lint_lib/google3/third_party/all_distance_sketch/all_distance_sketch/graph/utils.h",
		"/google/src/cloud/eliav/lint_lib/google3/third_party/all_distance_sketch/all_distance_sketch/graph/algo.h",
		"/google/src/cloud/eliav/lint_lib/google3/third_party/all_distance_sketch/BUILD",
		"/google/src/cloud/eliav/change_structure/google3/third_party/all_distance_sketch/all_distance_sketch/sketch/ut/ads_test.cpp",
		"/google/src/cloud/eliav/check_third_party_compile/google3/third_party/all_distance_sketch/all_distance_sketch/graph/lemon_graph_adaptor.h",
		"/google/src/cloud/eliav/check_third_party_compile/google3/third_party/all_distance_sketch/graph/lemon_graph_adaptor.h",
		"/google/src/cloud/eliav/check_third_party_compile/google3/all_distance_sketch/graph/lemon_graph_adaptor.h",
		"/google/src/cloud/eliav/check_third_party_compile/google3/experimental/ads_based_similarity/BUILD",
		"/google/src/cloud/eliav/fix_sub/google3/third_party/all_distance_sketch/all_distance_sketch/graph/graph.h",
		"/google/src/cloud/eliav/add_ads_lib/google3/experimental/ads_based_similarity/movielen/movielen_main.cc",
		"/google/src/cloud/eliav/fix_sub/google3/experimental/ads_based_similarity/ads_based_similarity/graph/graph_interface.h",
		"/google/src/cloud/eliav/lint_lib/google3/experimental/ads_based_similarity/ads_based_similarity/graph_information/ads_information.h",
		"/google/src/cloud/eliav/lint_lib/google3/experimental/ads_based_similarity/ads_based_similarity/measures/jaccard_predictor.h",
		"/google/src/cloud/eliav/lint_lib/google3/experimental/ads_based_similarity/ads_based_similarity/helper/running_sequence.h",
		"/google/src/cloud/eliav/lint_lib/google3/experimental/ads_based_similarity/movielen/experiments.h",
		"/google/src/cloud/eliav/lint_lib/google3/experimental/ads_based_similarity/ads_based_similarity/graph_information/graph_information_interface.h",
		"/google/src/cloud/eliav/lint_lib/google3/experimental/ads_based_similarity/ads_based_similarity/predictor/degree_predictor.h",
		"/google/src/cloud/eliav/lint_lib/google3/experimental/ads_based_similarity/ads_based_similarity/score_calculator/score_calculator_interface.h",
		"/google/src/cloud/eliav/lint_lib/google3/experimental/ads_based_similarity/ads_based_similarity/score_calculator/histo_calculator.h",
		"/google/src/cloud/eliav/lint_lib/google3/experimental/ads_based_similarity/movielen/movielen_main.cc",
		"/google/src/cloud/eliav/lint_lib/google3/third_party/all_distance_sketch/all_distance_sketch/graph/lemon_graph_adaptor.h",
		"/google/src/cloud/eliav/lint_lib/google3/experimental/ads_based_similarity/movielen/movielen_input_test.cc",
		"/google/src/cloud/eliav/fix_sub/google3/experimental/ads_based_similarity/BUILD",
		"/google/src/cloud/eliav/check_third_party_compile/google3/third_party/boost/allowed/BUILD",
		"/google/src/cloud/eliav/check_third_party_compile/google3/third_party/boost/BUILD",
		"/google/src/cloud/eliav/fix_sub/google3/third_party/all_distance_sketch/all_distance_sketch/graph/lemon_graph_adaptor.h",
		"/google/src/cloud/eliav/fix_sub/google3/experimental/ads_based_similarity/movielen/movielen_main.cc",
		"/google/src/cloud/eliav/fix_sub/google3/experimental/ads_based_similarity/ads_based_similarity/movielen/movielen_main.cc",
		"/google/src/cloud/eliav/add_ads_lib/google/experimental/ads_based_similarity/movielen/movielen_main.cc",
		"/google/src/cloud/eliav/add_ads_lib/experimental/ads_based_similarity/movielen/movielen_main.cc",
		"/google/src/cloud/eliav/lint_lib/google3/third_party/all_distance_sketch/all_distance_sketch/graph/generic_graph_adaptor.h",
		"/google/src/cloud/eliav/lint_lib/google3/third_party/all_distance_sketch/all_distance_sketch/graph/common.h",
		"/google/src/cloud/eliav/lint_lib/google3/third_party/all_distance_sketch/all_distance_sketch/graph/ut/algo_test.cpp",
		"/google/src/cloud/eliav/lint_lib/google3/third_party/all_distance_sketch/all_distance_sketch/graph/graph.h",
		"/google/src/cloud/eliav/lint_lib/google3/third_party/all_distance_sketch/all_distance_sketch/graph/ads.h",
		"/google/src/cloud/eliav/lint_lib/google3/third_party/all_distance_sketch/all_distance_sketch/graph/algo.cpp",
		"/google/src/cloud/eliav/lint_lib/google3/third_party/all_distance_sketch/all_distance_sketch/graph/rank_calculator.h",
		"/google/src/cloud/eliav/lint_lib/google3/third_party/all_distance_sketch/all_distance_sketch/graph/ut/ads_test.cpp",
		"/google/src/cloud/eliav/add_ads_lib/google3/third_party/all_distance_sketch/all_distance_sketch/graph/ads.h",
		"/google/src/cloud/eliav/add_ads_lib/google3/third_party/all_distance_sketch/all_distance_sketch/proto/all_distance_sketch.proto",
		"/google/src/cloud/eliav/lint_lib/google3/third_party/all_distance_sketch/all_distance_sketch/proto/all_distance_sketch.proto",
		"/google/src/cloud/eliav/lint_lib/google3/third_party/all_distance_sketch/all_distance_sketch/graph/ads.cpp",
		"/usr/local/google/home/eliav/lint.py",
		"/google/src/cloud/eliav/add_ads_lib/google3/BUILD",
		"/google/src/cloud/eliav/add_ads_lib/google3/third_party/all_distance_sketch/all_distance_sketch/graph/rank_generator.h",
		"/google/src/cloud/eliav/add_ads_lib/google3/third_party/all_distance_sketch/all_distance_sketch/graph/lemon_graph_adaptor.h",
		"/google/src/cloud/eliav/add_ads_lib/google3/third_party/all_distance_sketch/all_distance_sketch/algo.h",
		"/google/src/cloud/eliav/add_ads_lib/google3/third_party/all_distance_sketch/all_distance_sketch/graph/ut/basic_graph.cpp",
		"/google/src/cloud/eliav/add_ads_lib/google3/third_party/all_distance_sketch/all_distance_sketch/graph/utils.h",
		"/google/src/cloud/eliav/add_ads_lib/google3/third_party/all_distance_sketch/all_distance_sketch.sublime-project",
		"/google/src/cloud/eliav/add_ads_lib/google3/third_party/all_distance_sketch/BUILD",
		"/google/src/cloud/eliav/add_ads_lib/google3/third_party/all_distance_sketch/all_distance_sketch/graph/graph.h",
		"/google/src/cloud/eliav/add_ads_lib/google3/third_party/all_distance_sketch/all_distance_sketch/graph/ut/algo_test.cpp",
		"/google/src/cloud/eliav/add_ads_lib/google3/third_party/all_distance_sketch/all_distance_sketch/graph/algo.h",
		"/google/src/cloud/eliav/add_ads_lib/google3/third_party/all_distance_sketch/lemon_graph_adaptor.h",
		"/google/src/cloud/eliav/ads_external/google3/third_party/all_distance_sketch/all_distance_sketch/graph/ut/basic_graph.cpp",
		"/google/src/cloud/eliav/ads_external/google3/third_party/all_distance_sketch/all_distance_sketch/graph/graph.h",
		"/google/src/cloud/eliav/ads_external/google3/third_party/all_distance_sketch/all_distance_sketch/graph/ut/algo_test.cpp",
		"/google/src/cloud/eliav/ads_external/google3/third_party/all_distance_sketch/all_distance_sketch/graph/algo.h",
		"/google/src/cloud/eliav/ads_external/google3/third_party/all_distance_sketch/all_distance_sketch/graph/ads.h",
		"/google/src/cloud/eliav/ads_external/google3/third_party/all_distance_sketch/all_distance_sketch/graph/algo2.h",
		"/google/src/cloud/eliav/ads_external/google3/third_party/all_distance_sketch/all_distance_sketch/graph/estimator.h",
		"/google/src/cloud/eliav/ads_external/google3/third_party/all_distance_sketch/all_distance_sketch/graph/generic_graph_adaptor.h",
		"/google/src/cloud/eliav/ads_external/google3/third_party/all_distance_sketch/all_distance_sketch/graph/lemon_graph_adaptor.h",
		"/google/src/cloud/eliav/ads_external/google3/third_party/all_distance_sketch/all_distance_sketch/graph/utils.h",
		"/google/src/cloud/eliav/add_ads_lib/google3/third_party/all_distance_sketch/all_distance_sketch/graph/common.h",
		"/google/src/cloud/eliav/ads_external/google3/third_party/all_distance_sketch/all_distance_sketch/graph/common.h",
		"/google/src/cloud/eliav/add_ads_lib/google3/experimental/ads_based_similarity/ads_based_similarity/graph_information/graph_information_test.cc",
		"/google/src/cloud/eliav/add_ads_lib/google3/experimental/ads_based_similarity/ads_based_similarity/predictor/predictor_test.cc",
		"/google/src/cloud/eliav/add_ads_lib/google3/experimental/ads_based_similarity/ads_based_similarity/score_calculator/mse_calculator.h",
		"/google/src/cloud/eliav/add_ads_lib/google3/experimental/ads_based_similarity/ads_based_similarity/score_calculator/score_calculator_interface.h",
		"/google/src/cloud/eliav/add_ads_lib/google3/experimental/ads_based_similarity/ads_based_similarity/measures/centrality_interface.h",
		"/google/src/cloud/eliav/add_ads_lib/google3/experimental/ads_based_similarity/ads_based_similarity/measures/similarity_interface.h",
		"/google/src/cloud/eliav/add_ads_lib/google3/experimental/ads_based_similarity/ads_based_similarity/common.h",
		"/google/src/cloud/eliav/add_ads_lib/google3/experimental/ads_based_similarity/movielen/movielen_input_test.cc",
		"/google/src/cloud/eliav/add_ads_lib/google3/experimental/ads_based_similarity/BUILD",
		"/google/src/cloud/eliav/add_ads_lib/google3/experimental/ads_based_similarity/ads_based_similarity/measures/jaccard_predictor.h",
		"/google/src/cloud/eliav/add_ads_lib/google3/experimental/ads_based_similarity/movielen/movielen_adaptor.h",
		"/google/src/cloud/eliav/add_ads_lib/google3/experimental/ads_based_similarity/ads_based_similarity/score_calculator/score_calculator_test.cc",
		"/google/src/cloud/eliav/ads_external/google3/third_party/all_distance_sketch/BUILD",
		"//depot/google3/experimental/ads_based_similarity/ads_based_similarity/score_calculator/score_calculator_test.cc",
		"/google/src/cloud/eliav/add_ads_lib/google3/experimental/ads_based_similarity/ads_based_similarity/common.h:11",
		"/google/src/cloud/eliav/add_ads_lib/google3/experimental/ads_based_similarity/ads_based_similarity/measures/similarity_test.cc",
		"/google/src/cloud/eliav/add_ads_lib/google3/experimental/ads_based_similarity/ads_based_similarity/graph_information/graph_information_interface.h",
		"/google/src/cloud/eliav/add_ads_lib/google3/experimental/ads_based_similarity/ads_based_similarity/measures/closeness_centrality_predictor.h",
		"/google/src/cloud/eliav/add_ads_lib/google3/experimental/ads_based_similarity/ads_based_similarity/graph_information/ads_information.h",
		"/google/src/cloud/eliav/add_ads_lib/google3/experimental/ads_based_similarity/ads_based_similarity/measures/closeness_similarity.h",
		"/google/src/cloud/eliav/add_ads_lib/google3/third_party/all_distance_sketch/all_distance_sketch/graph/ut/ads_test.cpp",
		"/google/src/cloud/eliav/add_ads_lib/google3/third_party/all_distance_sketch/all_distance_sketch/graph/ut/run_all.cpp",
		"/google/src/cloud/eliav/add_ads_lib/google3/third_party/all_distance_sketch/all_distance_sketch/graph/algo.",
		"/google/src/cloud/eliav/add_ads_lib/google3/third_party/all_distance_sketch/all_distance_sketch/graph/ut/ads",
		"/google/src/cloud/eliav/add_ads_lib/google3/third_party/all_distance_sketch/all_distance_sketch/ads.h",
		"/google/src/cloud/eliav/add_ads_lib/google3/experimental/ads_based_similarity/ads_based_similarity/measures/weight_interface.h",
		"/google/src/cloud/eliav/add_ads_lib/google3/experimental/ads_based_similarity/ads_based_similarity/measures/decay_interface.h",
		"/google/src/cloud/eliav/add_ads_lib/google3/experimental/ads_based_similarity/ads_based_similarity.sublime-project"
	],
	"find":
	{
		"height": 35.0
	},
	"find_in_files":
	{
		"height": 93.0,
		"where_history":
		[
			"/google/src/cloud/eliav/ads_external/google3/third_party/all_distance_sketch/all_distance_sketch/graph",
			"/google/src/cloud/eliav/add_ads_lib/google3/third_party/all_distance_sketch/all_distance_sketch/graph,/google/src/cloud/eliav/add_ads_lib/google3/third_party/all_distance_sketch/all_distance_sketch/graph/ut",
			"/google/src/cloud/eliav/add_ads_lib/google3/third_party/all_distance_sketch/all_distance_sketch/graph"
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"snap",
			"HasM",
			"InsertCandidatesNodes",
			"CalculateSketchBatch",
			"CalculateGraphSketchMultiCore",
			"ThreadLoop",
			"CalculateSketchBatch",
			"nodes_random_id_sorted_increasing_",
			"GetNodesDistribution",
			"nodes_random_id_sorted_increasing_",
			"GetNodesDistribution",
			"ThreadLoop",
			"CalculateSketchBatch",
			"ThreadLoop",
			"algo_statistics_.",
			"algo_statistics_",
			"algo_statistics_->",
			"AssignTask",
			"CalculateGraphSketchMultiCore",
			"CalculateSketchBatch",
			"CalculateGraphSketchMultiCore",
			"algo_statistics",
			"CalculateGraphSketchMultiCore",
			"MultiCore",
			"ADSBasic",
			"num_visited_nodes",
			"ShouldPrune",
			"ShouldInsert",
			"ADSBasicFullGraphADS",
			"-ggdb",
			"-pg",
			"ADSBasic",
			"->graph_sketch",
			"shouldPrune",
			"CalculateNodeSketch",
			"PrunedDijkstra",
			"CalculateNodeSketch",
			"pruned",
			"all_distance_sketch::",
			"DijkstraCallBacks",
			"sholdStop",
			"graph_sketch",
			"EdgeWeight",
			"pruned",
			"InsertCandidatesNodes",
			"algo_statistics",
			"algo_statistics_",
			"AssignTask",
			"ThreadLoop",
			"CalculateSketchBatch",
			"CalculateNodeSketch",
			"CalculateGraphSketch",
			"CalculateNodeSketch",
			"PrunedDijkstra",
			"ShouldSkip",
			"call_backs.",
			"previous",
			"binomial_heap",
			"graph_sketch",
			"algo.",
			"algo",
			"ALL_DISTANCE_SKETCH_ALL_DISTANCE_SKETCH_ALGORITHMS_H_",
			"numNodesVisited",
			"numPrunedNodes",
			"numRelaxedEdges",
			"numPrunedNodes",
			"numNodesVisited",
			"EstimateReverseRank",
			"reverserank",
			"node_sketch",
			"node_sk",
			"ALL_DISTANCE_SKETCH_ALL_DISTANCE_SKETCH_GRAPH_UTILS_H_",
			"ALL_DISTANCE_SKETCH_ALL_DISTANCE_SKETCH_GRAPH_THREAD_UTILS_H_",
			"THIRD_PARTY_ALL_DISTANCE_SKETCH_ALL_DISTANCE_SKETCH_GRAPH_RANK_CALCULATOR_H_",
			"ALL_DISTANCE_SKETCH_ALL_DISTANCE_SKETCH_GRAPH_ADS_H_",
			"ALL_DISTANCE_SKETCH_ALL_DISTANCE_SKETCH_GRAPH_ALGO_H_",
			"ALL_DISTANCE_SKETCH_ALL_DISTANCE_SKETCH_GRAPH_COMMON_H_",
			"myMessages",
			"rank",
			"utils",
			"thread",
			"common.h",
			"ads.h",
			"[\n",
			"ads",
			"ads_test.cpp",
			"ads.cpp",
			"algo.cpp",
			"a::thread",
			"a::",
			"a::algo::",
			"GraphADS",
			"::::",
			"a::graph::",
			"ADS",
			"NodeSketch",
			"ADS",
			"a::graph",
			"a::data::",
			"all_distance_sketch_proto",
			"all_distance",
			"proto",
			"facebook",
			"RNN_GRAPH_GENERIC_GRAPH_ADAPTOR_H_",
			"sourceNode",
			"distanceFromSourceToTarget",
			"GetNodeSketch",
			"AssignTask",
			"aChannel",
			"AssignTask",
			"aParams",
			"batchSize",
			"threadCommChannels",
			"m",
			"endIndex",
			"end_index",
			"startIndex",
			"endIndex",
			"startIndex",
			"clean",
			"exec",
			"aEndIndex",
			"aStartIndex",
			"aParam",
			"aComm",
			"aSource",
			"Consta",
			"a::algo::"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"algo_statistics_.",
			"",
			"SketchDijkstraCallBacks",
			"graph::EdgeWeight",
			"call_backs->",
			"sketch_calculation.",
			"ALL_DISTANCE_SKETCH_ALL_DISTANCE_SKETCH_ALGORITHMS_SKETCH_CALCULATION_H_",
			"num_visited_nodes",
			"num_pruned_nodes",
			"num_relaxed_edges",
			"num_pruned_nodes",
			"num_visited_nodes",
			"ALL_DISTANCE_SKETCH_ALL_DISTANCE_SKETCH_UTILS_UTILS_H_",
			"ALL_DISTANCE_SKETCH_ALL_DISTANCE_SKETCH_UTILS_THREAD_UTILS_H_",
			"THIRD_PARTY_ALL_DISTANCE_SKETCH_ALL_DISTANCE_SKETCH_SKETCH_RANK_CALCULATOR_H_",
			"ALL_DISTANCE_SKETCH_ALL_DISTANCE_SKETCH_SKETCH_NODE_SKETCH_H_",
			"ALL_DISTANCE_SKETCH_ALL_DISTANCE_SKETCH_ALGORITHMS_H_",
			"ALL_DISTANCE_SKETCH_ALL_DISTANCE_SKETCH_GRAPH_H_",
			"messages_",
			"thread",
			"all_distance_sketch::",
			"GraphSketch",
			"::",
			"all_distance_sketch::graph::",
			"NodeSketch",
			"all_distance_sketch::graph::",
			"all_distance_sketch::",
			"ALL_DISTANCE_SKETCH_ALL_DISTANCE_SKETCH_GRAPH_GENERIC_GRAPH_ADAPTOR_H_",
			"source_node_details",
			"distance_from_source_to_targer",
			"communication_channel",
			"batch_size",
			"message",
			"end_index",
			"start_index",
			"end_index",
			"start_index",
			"clear_candidate_list",
			"insert_to_candidate_list",
			"end_index",
			"start_index",
			"dijkstra_param",
			"communication_channel",
			"source",
			"all_distance_sketch::",
			"all_distance_sketch",
			"a::constants",
			"",
			"all_distance_sketch",
			"id_of_neighbor_of_visited_node",
			"visited_noted_sketch",
			"visited_node_id",
			"distance_from_source_to_visited_node",
			"source_node_id",
			"added_node_to_ads",
			"visited_node",
			"num_visited",
			"source_node_random_id",
			"Sketch",
			"heap",
			"Heap",
			"max_node_id",
			"CalculateNodeSketch",
			"PrunedDijkstra",
			"InitNodeSketch",
			"NodeSketch",
			"EstimateReverseRank",
			"PrunedDijkstra",
			"CalculateNodeSketch",
			"CalculateSketchBatch",
			"AssignTask",
			"set_lean",
			"multi_threaded_run",
			"is_lean",
			"should_calculate_dijkstra_rank",
			"is_multi_threaded",
			"sketch_lock",
			"dijkstra_rank",
			"node_id",
			"RankData",
			"CalculateGraphSketch",
			"CalculateGraphSketchMultiCore",
			"PrunningAlgoStatistics",
			"algo_statistics",
			"increase_factor",
			"num_threads",
			"graph_sketch",
			"graph",
			"CalculateReverseRank",
			"ALL_DISTANCE_SKETCH_ALL_DISTANCE_SKETCH_GRAPH_ALGO_H_",
			"all_distance_sketch::",
			"nodes_id",
			"max_node_id",
			"nodes_random_id",
			"node_id",
			"node_details",
			"node_id",
			"nodes_random_id_sorted_increasing_",
			"nodes_random_id_",
			"nodes_random_id_sorted_increasing",
			"nodes_random_id",
			"nodes_ads_",
			"reserve_size_",
			"InitGraphADS",
			"neighbourhoods_",
			"node_distribution",
			"random_id",
			"distance",
			"GetSketchSize",
			"nodes_id_distance_vector",
			"distance",
			"position_relative_to_begin",
			"position_upper",
			"is_distance_equal_to_following_node_distance_in_ads",
			"should_insert",
			"id_z_value",
			"node_details",
			"z_values_",
			"is_zvalue",
			"should_insert",
			"node_details",
			"candidate_nodes_",
			"AddToCandidates",
			"nodes_id_distance_",
			"prunning_thresholds_",
			"NodeDistanceIdRandomIdDataVectorItr",
			"NodeDistanceIdRandomIdDataVector",
			"NodeIdDistanceVectorItr"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 9,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "all_distance_sketch/algorithms/dijkstra_shortest_paths.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9261,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "all_distance_sketch/algorithms/sketch_calculation.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8762,
						"regions":
						{
						},
						"selection":
						[
							[
								1540,
								1540
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "all_distance_sketch/graph/lemon_graph_adaptor.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9809,
						"regions":
						{
						},
						"selection":
						[
							[
								498,
								498
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "/google/src/cloud/eliav/change_structure/google3/experimental/ads_based_similarity/ads_based_similarity/graph_information/ads_information.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5164,
						"regions":
						{
						},
						"selection":
						[
							[
								544,
								544
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "/google/src/cloud/eliav/add_ads_lib/google3/third_party/all_distance_sketch/all_distance_sketch/algorithms/ut/algo_test.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 36965,
						"regions":
						{
						},
						"selection":
						[
							[
								287,
								287
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "all_distance_sketch/graph/snap_graph_adaptor.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 651,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "/google/src/cloud/eliav/add_ads_lib/google3/third_party/all_distance_sketch/BUILD",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2394,
						"regions":
						{
						},
						"selection":
						[
							[
								1419,
								1419
							]
						],
						"settings":
						{
							"syntax": "Packages/C#/Build.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 285.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "/google/src/cloud/eliav/add_ads_lib/google3/third_party/all_distance_sketch/all_distance_sketch/graph/ut/basic_graph.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8453,
						"regions":
						{
						},
						"selection":
						[
							[
								76,
								76
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "all_distance_sketch/graph/graph.h",
					"semi_transient": true,
					"settings":
					{
						"buffer_size": 7065,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "BUILD",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2712,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C#/Build.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 741.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "all_distance_sketch/sketch/node_sketch.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 22183,
						"regions":
						{
						},
						"selection":
						[
							[
								8922,
								8922
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4888.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "all_distance_sketch/graph/ut/basic_graph.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8454,
						"regions":
						{
						},
						"selection":
						[
							[
								207,
								207
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "all_distance_sketch/proto/all_distance_sketch.proto",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2507,
						"regions":
						{
						},
						"selection":
						[
							[
								28,
								28
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 27.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "all_distance_sketch.sublime-project",
	"replace":
	{
		"height": 64.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"algo_tes",
				"/google/src/cloud/eliav/add_ads_lib/google3/third_party/all_distance_sketch/all_distance_sketch/graph/ut/algo_test.cpp"
			],
			[
				"graph.h",
				"/google/src/cloud/eliav/ads_external/google3/third_party/all_distance_sketch/all_distance_sketch/graph/graph.h"
			],
			[
				"ads.h",
				"/google/src/cloud/eliav/add_ads_lib/google3/third_party/all_distance_sketch/all_distance_sketch/graph/ads.h"
			],
			[
				"close",
				"ads_based_similarity/measures/closeness_centrality_predictor.h"
			],
			[
				"graph_info",
				"ads_based_similarity/graph_information/graph_information_interface.h"
			],
			[
				"_test",
				"ads_based_similarity/score_calculator/score_calculator_test.cc"
			],
			[
				"graph_",
				"ads_based_similarity/graph_information/graph_information_test.cc"
			],
			[
				"ads_inf",
				"ads_based_similarity/graph_information/ads_information.h"
			],
			[
				"predict",
				"ads_based_similarity/predictor/predictor_test.cc"
			],
			[
				"graph_information",
				"ads_based_similarity/graph_information/graph_information_interface.h"
			],
			[
				"weight",
				"ads_based_similarity/measures/weight_interface.h"
			],
			[
				"bui",
				"BUILD"
			],
			[
				"ads_in",
				"ads_based_similarity/graph_information/ads_information.h"
			],
			[
				"basic",
				"all_distance_sketch/graph/ut/basic_graph.cpp"
			],
			[
				"run_",
				"all_distance_sketch/graph/ut/run_all.cpp"
			],
			[
				"common",
				"all_distance_sketch/graph/common.h"
			],
			[
				"common.",
				"all_distance_sketch/graph/common.h"
			],
			[
				"run_a",
				"all_distance_sketch/graph/ut/run_all.cpp"
			],
			[
				"ads",
				"all_distance_sketch/graph/ut/ads_test.cpp"
			],
			[
				"basic_",
				"all_distance_sketch/graph/ut/basic_graph.cpp"
			],
			[
				"algo",
				"all_distance_sketch/graph/ut/algo_test.cpp"
			],
			[
				"lemon",
				"lemon_graph_adaptor.h"
			],
			[
				"common.h",
				"all_distance_sketch/graph/common.h"
			],
			[
				"algo.h",
				"all_distance_sketch/graph/algo.h"
			],
			[
				"ads_tes",
				"all_distance_sketch/graph/ut/ads_test.cpp"
			],
			[
				"basic_gr",
				"all_distance_sketch/graph/ut/basic_graph.cpp"
			],
			[
				"run_all",
				"all_distance_sketch/graph/ut/run_all.cpp"
			],
			[
				"run_all.c",
				"all_distance_sketch/graph/ut/run_all.cpp"
			],
			[
				"ads_te",
				"all_distance_sketch/graph/ut/ads_test.cpp"
			],
			[
				"basic_gra",
				"all_distance_sketch/graph/ut/basic_graph.cpp"
			],
			[
				"estimator",
				"all_distance_sketch/graph/estimator.h"
			],
			[
				"snap",
				"all_distance_sketch/graph/snap_adaptor.h"
			],
			[
				"graph.",
				"RNN/graph/graph.h"
			],
			[
				"ads.c",
				"RNN/graph/ads.cpp"
			],
			[
				"ads.cpp",
				"RNN/graph/ads.cpp"
			],
			[
				"make",
				"makefile"
			],
			[
				"utils.h",
				"RNN/graph/utils.h"
			],
			[
				"util",
				"RNN/graph/utils.h"
			],
			[
				"algo_test",
				"RNN/graph/ut/algo_test.cpp"
			],
			[
				"algote",
				"out/graph/ut/algo_test"
			],
			[
				"grap",
				"RNN/graph/graph.h"
			],
			[
				"thread_",
				"RNN/graph/thread_utils.h"
			],
			[
				"build_tes",
				"build_test"
			],
			[
				"build_sr",
				"build_src"
			],
			[
				"run_tes",
				"run_tests"
			],
			[
				"ads_",
				"RNN/graph/ut/ads_test.cpp"
			],
			[
				"thread_utils",
				"RNN/graph/thread_utils.h"
			],
			[
				"graph",
				"RNN/graph/graph.h"
			],
			[
				"build_te",
				"build_test"
			],
			[
				"algo_te",
				"RNN/graph/ut/algo_test.cpp"
			],
			[
				"ads_test",
				"RNN/graph/ut/ads_test.cpp"
			],
			[
				"basic_graph",
				"out/graph/ut/basic_graph"
			],
			[
				"build_s",
				"build_src"
			],
			[
				"build",
				"build_src"
			],
			[
				"hash.h",
				"ext/Snap-2.3/glib-core/hash.h"
			],
			[
				"shash",
				"ext/Snap-2.3/glib-core/shash.h"
			],
			[
				"__init",
				"test/__init__.py"
			],
			[
				"setup.py",
				"setup.py"
			],
			[
				"alarm",
				"elixir/alarm/__init__.py"
			],
			[
				"stl.",
				"elixir/common/stl.py"
			],
			[
				"algo.cpp",
				"RNN/graph/algo.cpp"
			],
			[
				"build_test",
				"build_test"
			],
			[
				"build_t",
				"build_test"
			],
			[
				"build_",
				"build_src"
			],
			[
				"algo_test.c",
				"RNN/graph/ut/algo_test.cpp"
			],
			[
				"algo.c",
				"RNN/graph/algo.cpp"
			],
			[
				"dijk",
				"RNN/graph/ut/dijkstra.cpp"
			],
			[
				"dijkstra",
				"RNN/graph/ut/dijkstra.cpp"
			],
			[
				"run_s",
				"sim_city/run_sim.py"
			],
			[
				"sim.",
				"sim_city/sim.py"
			],
			[
				"oscar.pyx",
				"sim_city/oscar.pyx"
			],
			[
				"scheduler_c",
				"sim_city/scheduler_c.pyx"
			],
			[
				"test_sche",
				"test/test_scheduler.py"
			],
			[
				"sched",
				"sim_city/scheduler_c.pyx"
			],
			[
				"scheduler.pyx",
				"sim_city/scheduler.pyx"
			],
			[
				"acquisition_manager",
				"sim_city/acquisition_manager.pyx"
			],
			[
				"sim.py",
				"sim_city/sim.py"
			],
			[
				"oscar.py",
				"sim_city/oscar.pyx"
			],
			[
				"utils.pyx",
				"sim_city/utils.pyx"
			],
			[
				"title_manager",
				"sim_city/title_manager.pyx"
			],
			[
				"delivery",
				"sim_city/delivery_manager.pyx"
			],
			[
				"run",
				"sim_city/run_sim.py"
			],
			[
				"run_si",
				"sim_city/run_sim.py"
			],
			[
				"oscar.pxd",
				"sim_city/oscar.pxd"
			],
			[
				"transac",
				"sim_city/transaction_digest.pxd"
			],
			[
				"cotent",
				"sim_city/content_cleaner.pyx"
			],
			[
				"transaction_dige",
				"sim_city/transaction_digest.pyx"
			],
			[
				"title_",
				"sim_city/title_manager.pyx"
			],
			[
				"oscar",
				"sim_city/oscar.pyx"
			],
			[
				"acquisition_",
				"sim_city/acquisition_manager.pyx"
			],
			[
				"tit",
				"sim_city/title_manager.pyx"
			],
			[
				"sch",
				"sim_city/scheduler_c.pxd"
			],
			[
				"sche",
				"sim_city/scheduler.pxd"
			],
			[
				"sim.p",
				"sim_city/sim.py"
			],
			[
				"run_sim",
				"sim_city/run_sim.py"
			],
			[
				"scheduler",
				"sim_city/scheduler.pyx"
			],
			[
				"commo",
				"test/common.py"
			],
			[
				"test_osca",
				"test/test_oscar.py"
			],
			[
				"test_",
				"test/test_scheduler.py"
			],
			[
				"setup",
				"setup.py"
			],
			[
				"shc",
				"sim_city/scheduler_c.pxd"
			],
			[
				"sim",
				"sim_city/sim.py"
			],
			[
				"osca",
				"sim_city/oscar.pxd"
			],
			[
				"title_manager.pyx",
				"sim_city/title_manager.pyx"
			],
			[
				"title",
				"sim_city/title_manager.pyx"
			],
			[
				"al",
				"sim_city/algorithm.pyx"
			],
			[
				"titl_",
				"sim_city/title_manager.pxd"
			],
			[
				"utils",
				"test/test_utils.py"
			],
			[
				"titl",
				"sim_city/title_manager.pxd"
			],
			[
				"title_manag",
				"sim_city/title_manager.pyx"
			],
			[
				"test_titl",
				"test/test_title_manager.py"
			],
			[
				"test_seg",
				"test/test_segments.py"
			],
			[
				"_seg",
				"sim_city/_segments.pxd"
			],
			[
				"com",
				"test/common.py"
			],
			[
				"trnasac",
				"sim_city/transaction_digest.pyx"
			],
			[
				"test_tit",
				"test/test_title_manager.py"
			],
			[
				"content_cleaner",
				"sim_city/content_cleaner.pyx"
			],
			[
				"title_mana",
				"sim_city/title_manager.pyx"
			],
			[
				"sced",
				"sim_city/scheduler.py"
			],
			[
				"oscar.",
				"sim_city/oscar.py"
			],
			[
				"disk_",
				"sim_city/disk_manager.py"
			],
			[
				"acquistion",
				"sim_city/acquisition_manager.py"
			],
			[
				"content",
				"sim_city/content_cleaner.pyx"
			],
			[
				"media",
				"sim_city/media_manager.pyx"
			],
			[
				"set",
				"setup.py"
			],
			[
				"s",
				"sim_city/scheduler.pyx"
			],
			[
				"ui",
				"alchemy/ui/__init__.py"
			],
			[
				"init",
				"alchemy/_common/__init__.py"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"/work/eng/eliavb/main/main/dev/src/p/tools/sim_city/main/sim_city/sim_city.sublime-workspace"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 313.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
