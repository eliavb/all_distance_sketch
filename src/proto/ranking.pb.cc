// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/ranking.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "proto/ranking.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace all_distance_sketch {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* NodeRankGpb_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodeRankGpb_reflection_ = NULL;
const ::google::protobuf::Descriptor* NodeRanksGpb_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodeRanksGpb_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_proto_2franking_2eproto() {
  protobuf_AddDesc_proto_2franking_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "proto/ranking.proto");
  GOOGLE_CHECK(file != NULL);
  NodeRankGpb_descriptor_ = file->message_type(0);
  static const int NodeRankGpb_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeRankGpb, node_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeRankGpb, node_rank_),
  };
  NodeRankGpb_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NodeRankGpb_descriptor_,
      NodeRankGpb::default_instance_,
      NodeRankGpb_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeRankGpb, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeRankGpb, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NodeRankGpb));
  NodeRanksGpb_descriptor_ = file->message_type(1);
  static const int NodeRanksGpb_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeRanksGpb, source_node_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeRanksGpb, max_node_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeRanksGpb, node_ranks_),
  };
  NodeRanksGpb_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NodeRanksGpb_descriptor_,
      NodeRanksGpb::default_instance_,
      NodeRanksGpb_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeRanksGpb, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeRanksGpb, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NodeRanksGpb));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_proto_2franking_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NodeRankGpb_descriptor_, &NodeRankGpb::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NodeRanksGpb_descriptor_, &NodeRanksGpb::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_proto_2franking_2eproto() {
  delete NodeRankGpb::default_instance_;
  delete NodeRankGpb_reflection_;
  delete NodeRanksGpb::default_instance_;
  delete NodeRanksGpb_reflection_;
}

void protobuf_AddDesc_proto_2franking_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023proto/ranking.proto\022\031all_distance_sket"
    "ch.proto\"1\n\013NodeRankGpb\022\017\n\007node_id\030\001 \001(\004"
    "\022\021\n\tnode_rank\030\002 \001(\004\"w\n\014NodeRanksGpb\022\026\n\016s"
    "ource_node_id\030\001 \001(\004\022\023\n\013max_node_id\030\002 \001(\004"
    "\022:\n\nnode_ranks\030\003 \003(\0132&.all_distance_sket"
    "ch.proto.NodeRankGpb", 220);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "proto/ranking.proto", &protobuf_RegisterTypes);
  NodeRankGpb::default_instance_ = new NodeRankGpb();
  NodeRanksGpb::default_instance_ = new NodeRanksGpb();
  NodeRankGpb::default_instance_->InitAsDefaultInstance();
  NodeRanksGpb::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_proto_2franking_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_proto_2franking_2eproto {
  StaticDescriptorInitializer_proto_2franking_2eproto() {
    protobuf_AddDesc_proto_2franking_2eproto();
  }
} static_descriptor_initializer_proto_2franking_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int NodeRankGpb::kNodeIdFieldNumber;
const int NodeRankGpb::kNodeRankFieldNumber;
#endif  // !_MSC_VER

NodeRankGpb::NodeRankGpb()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NodeRankGpb::InitAsDefaultInstance() {
}

NodeRankGpb::NodeRankGpb(const NodeRankGpb& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NodeRankGpb::SharedCtor() {
  _cached_size_ = 0;
  node_id_ = GOOGLE_ULONGLONG(0);
  node_rank_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NodeRankGpb::~NodeRankGpb() {
  SharedDtor();
}

void NodeRankGpb::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NodeRankGpb::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeRankGpb::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeRankGpb_descriptor_;
}

const NodeRankGpb& NodeRankGpb::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2franking_2eproto();
  return *default_instance_;
}

NodeRankGpb* NodeRankGpb::default_instance_ = NULL;

NodeRankGpb* NodeRankGpb::New() const {
  return new NodeRankGpb;
}

void NodeRankGpb::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    node_id_ = GOOGLE_ULONGLONG(0);
    node_rank_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NodeRankGpb::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 node_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &node_id_)));
          set_has_node_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_node_rank;
        break;
      }

      // optional uint64 node_rank = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_node_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &node_rank_)));
          set_has_node_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NodeRankGpb::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 node_id = 1;
  if (has_node_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->node_id(), output);
  }

  // optional uint64 node_rank = 2;
  if (has_node_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->node_rank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NodeRankGpb::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 node_id = 1;
  if (has_node_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->node_id(), target);
  }

  // optional uint64 node_rank = 2;
  if (has_node_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->node_rank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NodeRankGpb::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 node_id = 1;
    if (has_node_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->node_id());
    }

    // optional uint64 node_rank = 2;
    if (has_node_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->node_rank());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeRankGpb::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NodeRankGpb* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NodeRankGpb*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NodeRankGpb::MergeFrom(const NodeRankGpb& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_node_id()) {
      set_node_id(from.node_id());
    }
    if (from.has_node_rank()) {
      set_node_rank(from.node_rank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NodeRankGpb::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeRankGpb::CopyFrom(const NodeRankGpb& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeRankGpb::IsInitialized() const {

  return true;
}

void NodeRankGpb::Swap(NodeRankGpb* other) {
  if (other != this) {
    std::swap(node_id_, other->node_id_);
    std::swap(node_rank_, other->node_rank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NodeRankGpb::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodeRankGpb_descriptor_;
  metadata.reflection = NodeRankGpb_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NodeRanksGpb::kSourceNodeIdFieldNumber;
const int NodeRanksGpb::kMaxNodeIdFieldNumber;
const int NodeRanksGpb::kNodeRanksFieldNumber;
#endif  // !_MSC_VER

NodeRanksGpb::NodeRanksGpb()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NodeRanksGpb::InitAsDefaultInstance() {
}

NodeRanksGpb::NodeRanksGpb(const NodeRanksGpb& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NodeRanksGpb::SharedCtor() {
  _cached_size_ = 0;
  source_node_id_ = GOOGLE_ULONGLONG(0);
  max_node_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NodeRanksGpb::~NodeRanksGpb() {
  SharedDtor();
}

void NodeRanksGpb::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NodeRanksGpb::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeRanksGpb::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeRanksGpb_descriptor_;
}

const NodeRanksGpb& NodeRanksGpb::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2franking_2eproto();
  return *default_instance_;
}

NodeRanksGpb* NodeRanksGpb::default_instance_ = NULL;

NodeRanksGpb* NodeRanksGpb::New() const {
  return new NodeRanksGpb;
}

void NodeRanksGpb::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    source_node_id_ = GOOGLE_ULONGLONG(0);
    max_node_id_ = GOOGLE_ULONGLONG(0);
  }
  node_ranks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NodeRanksGpb::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 source_node_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &source_node_id_)));
          set_has_source_node_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_max_node_id;
        break;
      }

      // optional uint64 max_node_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_node_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &max_node_id_)));
          set_has_max_node_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_node_ranks;
        break;
      }

      // repeated .all_distance_sketch.proto.NodeRankGpb node_ranks = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_node_ranks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_node_ranks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_node_ranks;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NodeRanksGpb::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 source_node_id = 1;
  if (has_source_node_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->source_node_id(), output);
  }

  // optional uint64 max_node_id = 2;
  if (has_max_node_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->max_node_id(), output);
  }

  // repeated .all_distance_sketch.proto.NodeRankGpb node_ranks = 3;
  for (int i = 0; i < this->node_ranks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->node_ranks(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NodeRanksGpb::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 source_node_id = 1;
  if (has_source_node_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->source_node_id(), target);
  }

  // optional uint64 max_node_id = 2;
  if (has_max_node_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->max_node_id(), target);
  }

  // repeated .all_distance_sketch.proto.NodeRankGpb node_ranks = 3;
  for (int i = 0; i < this->node_ranks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->node_ranks(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NodeRanksGpb::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 source_node_id = 1;
    if (has_source_node_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->source_node_id());
    }

    // optional uint64 max_node_id = 2;
    if (has_max_node_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->max_node_id());
    }

  }
  // repeated .all_distance_sketch.proto.NodeRankGpb node_ranks = 3;
  total_size += 1 * this->node_ranks_size();
  for (int i = 0; i < this->node_ranks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->node_ranks(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeRanksGpb::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NodeRanksGpb* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NodeRanksGpb*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NodeRanksGpb::MergeFrom(const NodeRanksGpb& from) {
  GOOGLE_CHECK_NE(&from, this);
  node_ranks_.MergeFrom(from.node_ranks_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_source_node_id()) {
      set_source_node_id(from.source_node_id());
    }
    if (from.has_max_node_id()) {
      set_max_node_id(from.max_node_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NodeRanksGpb::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeRanksGpb::CopyFrom(const NodeRanksGpb& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeRanksGpb::IsInitialized() const {

  return true;
}

void NodeRanksGpb::Swap(NodeRanksGpb* other) {
  if (other != this) {
    std::swap(source_node_id_, other->source_node_id_);
    std::swap(max_node_id_, other->max_node_id_);
    node_ranks_.Swap(&other->node_ranks_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NodeRanksGpb::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodeRanksGpb_descriptor_;
  metadata.reflection = NodeRanksGpb_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace all_distance_sketch

// @@protoc_insertion_point(global_scope)
